generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clients {
  id         Int         @id @default(autoincrement())
  name       String
  phone      String?
  email      String?
  address    String?
  orders     orders[]
  quotations Quotation[]
}

model glassColor {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  windows           windows[]
  // ✨ AÑADE ESTA LÍNEA (El camino de regreso)
  quotation_windows QuotationWindow[]
}

model window_types {
  id                 Int                     @id @default(autoincrement())
  name               String
  description        String?
  windows            windows[]
  pvcLinks           window_types_pvcColor[]
  calculation        window_calculations?
  // ✨ AÑADE ESTA LÍNEA (El camino de regreso)
  quotation_windows  QuotationWindow[]
}

model window_calculations {
  id             Int      @id @default(autoincrement())
  window_type_id Int      @unique
  hojaDivision   String
  hojaMargen     Float    @default(0)
  hojaDescuento  Float
  vidrioDescuento Float
  createdAt      DateTime @default(now())
  window_type    window_types @relation(fields: [window_type_id], references: [id], onDelete: Cascade)
}

model pvcColor {
  id                Int                       @id @default(autoincrement())
  name              String
  description       String?
  windows           windows[]
  typeLinks         window_types_pvcColor[]
  // ✨ AÑADE ESTA LÍNEA (El camino de regreso)
  quotation_windows QuotationWindow[]
}

model window_types_pvcColor {
  id             Int          @id @default(autoincrement())
  window_type_id Int
  pvcColor_id    Int
  window_type    window_types @relation(fields: [window_type_id], references: [id], onDelete: Cascade)
  pvcColor       pvcColor     @relation(fields: [pvcColor_id], references: [id])

  @@unique([window_type_id, pvcColor_id], name: "unique_pair")
  @@map("window_types_pvcColor")
}

model orders {
  id                       Int        @id @default(autoincrement())
  project                  String
  status                   String?
  total                    Float?
  clientId                 Int?
  installationStartDate    DateTime?  // ✨ AÑADE ESTA LÍNEA
  installationEndDate      DateTime?  // ✨ AÑADE ESTA LÍNEA
  createdAt                DateTime   @default(now())
  updatedAt                DateTime?
  generatedFromQuotationId Int?       @unique
  generatedFromQuotation   Quotation? @relation(fields: [generatedFromQuotationId], references: [id])
  clients                  clients?   @relation(fields: [clientId], references: [id])
  windows                  windows[]
}

model windows {
  id             Int           @id @default(autoincrement())
  width_cm       Float
  height_cm      Float
  price          Float
  hojaAncho      Float?
  hojaAlto       Float?
  vidrioAncho    Float?
  vidrioAlto     Float?
  order_id       Int?
  window_type_id Int?
  color_id       Int?
  glass_color_id Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?
  pvcColor       pvcColor?     @relation(fields: [color_id], references: [id])
  glassColor     glassColor?   @relation(fields: [glass_color_id], references: [id])
  order          orders?       @relation(fields: [order_id], references: [id])
  window_type    window_types? @relation(fields: [window_type_id], references: [id])
}

model catalogo_perfiles {
  id                Int     @id @default(autoincrement())
  tipo_ventana      String  @unique
  perfil_marco      String?
  perfil_hoja       String?
  perfil_mosquitero String?
  perfil_batiente   String?
  perfil_tapajamba  String?
  regla_marco       String?
  regla_hoja        String?
  regla_mosquitero  String?
  regla_batiente    String?
  regla_tapajamba   String?
  cant_vidrios      Int?
  cerrojos          Int?
  rodos             Int?
  rodo_mosquitero   Int?
  bisagras          String?
  chapa             String?
  demas_accesorios  String?
  accesorios        String?
}

model Quotation {
  id                Int               @id @default(autoincrement())
  project           String
  status            String            @default("en proceso")
  price_per_m2      Float
  total_price       Float?
  clientId          Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  client            clients?          @relation(fields: [clientId], references: [id])
  quotation_windows QuotationWindow[]
  generatedOrder    orders?
}

model QuotationWindow {
  id             Int          @id @default(autoincrement())
  width_cm       Float
  height_cm      Float
  price          Float
  price_per_m2     Float?
  quotation_id   Int
  window_type_id Int
  color_id       Int
  glass_color_id Int
  quotation      Quotation    @relation(fields: [quotation_id], references: [id], onDelete: Cascade)
  window_type    window_types @relation(fields: [window_type_id], references: [id])
  pvcColor       pvcColor     @relation(fields: [color_id], references: [id])
  glassColor     glassColor   @relation(fields: [glass_color_id], references: [id])
}

enum Role {
  ADMINISTRADOR
  VENDEDOR
}

// Define la tabla de usuarios.
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(VENDEDOR) // Por seguridad, el rol por defecto es el de menos privilegios.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}